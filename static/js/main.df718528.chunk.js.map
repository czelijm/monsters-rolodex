{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCDbC,EAAW,SAACR,GACzB,OAAO,qBAAKC,UAAU,YAAf,SAEJD,EAAMS,SAASC,KAAI,SAACN,GAAD,OACV,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCyDJG,E,kDAzDb,aAAc,IAAD,8BACX,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAZpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJH,E,qDAkBb,WAAoB,IAAD,OAEjBI,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAGzC,WAAQ,MAK2BC,KAAKN,MAA9Bb,EALF,EAKEA,SAASU,EALX,EAKWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACA,iDAGA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,EAApB,SAKK,Y,GA/COI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.df718528.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n) ","import React from 'react';\r\nimport './card-list.style.css';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\n//render list of components\r\nexport const CardList = (props)=>{\r\nreturn <div className=\"card-list\">{\r\n    //prop.childre is the parameters that is given inside open/close tags ex. <h1>parameter</h1>\r\n   props.monsters.map((monster)=>(\r\n            <Card key={monster.id} monster={monster}/>\r\n          ))\r\n}\r\n</div>;\r\n}","import React from 'react';\r\n\r\nimport './searchbox.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={ handleChange}/>\r\n);","import React, {Component} from 'react';\nimport './App.css';\n\nimport {CardList} from './Components/card-list/card-list.component';\nimport {SearchBox} from './Components/searchbox/searchbox.component';\n\n//we convert from function to class to access render() method, render method return any HTML\n//State is some object\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n\n    //because javascript dont set scope to their function/methods we have to set context by ourselfs\n    //bind returns the function with context that we set to\n    //for metheds that is not the arrow functions\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) =>{\n    this.setState({searchField:e.target.value});\n  }\n\n  //method that is called by react, when method is mounted (first time rendered by react in virtual dom)\n  componentDidMount(){\n    //api call to url, fetch() retutn the promise\n    fetch('https://jsonplaceholder.typicode.com/users')\n    //we convert the response to jsonformat\n    .then(response =>response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  render(){\n    //destructure the object, pulling of properties insted of\n    // const monsters = this.state.monsters;\n    // const searchFiels = this.state.searchField;\n    //we do\n    const { monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())  \n    );\n    return (\n      <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      {/* this.setState({thing ON state update},()=>{things after state update}) */}\n      {/* we pass this.handleChange ---> we pass entire callback body */}\n      <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n      <CardList monsters={filteredMonsters}>\n        {\n          //we will aplly function for all elements\n          //react will now to render all the elements (this array which is returned), bunch of HTML blocks\n          //every element need unique key in case of updating the particular block\n           {/* this.state.monsters.map((monster)=>(\n            <h1 key={monster.id}>{monster.name}</h1>\n          ))  */}\n          //console.log(this.state.monsters) \n        }\n      </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//ended on 35","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}